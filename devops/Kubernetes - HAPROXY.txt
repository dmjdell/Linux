kubectl create ns haproxy-controller-nautilus


kubectl create sa haproxy-service-account-nautilus -n  haproxy-controller-nautilus



apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: haproxy-cluster-role-nautilus
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - services
  - namespaces
  - events
  - serviceaccounts
  verbs:
  - get  - list
  - watch
- apiGroups:
  - "extensions"
  resources:
  - ingresses
  - ingresses/status
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: haproxy-cluster-role-binding-nautilus
subjects:
- kind: ServiceAccount
  name:  haproxy-service-account-nautilus
  apiGroup: rbac.authorization.k8s.io
  namespace: haproxy-controller-nautilus
roleRef:
  kind: ClusterRole
  name: haproxy-cluster-role-nautilus
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment-nautilus
  namespace: haproxy-controller-nautilus
  labels:
    run: ingress-default-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      run: ingress-default-backend
  template:
    metadata:
      labels:
        run: ingress-default-backend
    spec:
      containers:
      - name: backend-container-datacenter
        image: gcr.io/google_containers/defaultbackend:1.0
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: service-backend-datacenter
  labels:
   run: ingress-default-backend
spec:
  selector:
    run: ingress-default-backend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy-ingress-datacenter
  namespace: haproxy-cluster-role-binding-datacenter
spec:
  replicas: 1
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        run: haproxy-ingress
    spec:
	  serviceAccountName: haproxy-service-account-datacenter
      containers:
      - name: ingress-container-datacenter
        image: haproxytech/kubernetes-ingress
		args: [“--default-backend-service=haproxy-controller-nautilus/service-backend-datacenter”]
		resources:
          requests:
            memory: "50Mi"
            cpu: "500m"
		livenessProbe:
		  httpGet:
			path: /healthz
			port: 1024
        ports:
		- name: http
		  containerPort: 80
		- name: https
		  containerPort: 8080
		- name: stat
		  containerPort: 1024
        env:
        - name: TZ
          value: "Etc/UTC"
        - name: POD_NAME 
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE  
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-service-datacenter
  labels:
   run: haproxy-ingress
spec:
  type: NodePort
  selector:
    run: haproxy-ingress
  ports:
    - name: http
	  protocol: TCP
	  nodePort: 32456
      port: 80
      targetPort: 80
	- name: https
	  protocol: TCP
	  nodePort: 32567
      port: 443
      targetPort: 443
	- name: https
	  protocol: stat
	  nodePort: 32678
      port: 1024
      targetPort: 1024
  